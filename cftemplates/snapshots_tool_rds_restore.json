{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {
		"CodeBucket": {
			"Type": "String",
			"Default": "DEFAULT_BUCKET",
			"Description": "Name of the bucket that contains the lambda functions to deploy. Leave the default value to download the code from the AWS Managed buckets"
		},
		"SnapshotPattern": {
			"Type": "String",
			"Default": "ALL_SNAPSHOTS",
			"Description": "Python regex for matching instance names to backup. Use \"ALL_SNAPSHOTS\" to back up every RDS instance in the region."
		},
		"SnapshotType": {
			"Type": "String",
			"Default": "manual",
			"Description": "Type of snapshots to restore",
			"AllowedValues": ["manual", "shared", "automatic"]
		},
		"SourceRegionOverride": {
			"Type": "String",
			"Default": "NO",
			"Description": "Set to the region where your RDS instances run, only if such region does not support Step Functions. Leave as NO otherwise"
		},
		"DatabasePattern": {
			"Type": "String",
			"Default": "^app-prod-",
			"Description": "Python regex for matching instance names to manage (Restore, target and delete)."
		},
		"SnapshotDbMap": {
			"Type": "String",
			"Default": "{ \".*\": null }",
			"Description": "JSON string with a map (dict) for mapping snapshots to db instances. This is used to determine which db instances are the restores of matching snapshots."
		},
		"RestoreInterval": {
			"Type": "String",
			"Default": "24",
			"Description": "Restore interval in hours. 1 min and default 24"
		},
		"RunSchedule": {
			"Type": "String",
			"Default": "*/30 * * * ? *",
			"Description": "Run schedule in Cloudwatch Event cron format. Needs to run at least once for every RestoreInterval. The default value runs once every 30 minutes. More information: http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
		},
		"RestoreArgs": {
			"Type": "String",
			"Default": "{\"DBInstanceClass\": \"db.t3.medium\",\"MultiAZ\":false,\"PubliclyAccessible\":false,\"AutoMinorVersionUpgrade\":true}",
			"Description": "JSON string with arguments for new db instance creation. See https://boto3.amazonaws.com/v1/documentation/api/1.16.51/reference/services/rds.html#RDS.Client.restore_db_instance_from_db_snapshot and https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/RestoreDBInstanceFromDBSnapshot."
		},
		"LoadBalancer": {
			"Type": "String",
			"Default": "",
			"Description": "Name or ARN of the network ilb or elb to point to new restored db instance (DB instance is a Target in target group of this LB)."
		},
		"LogLevel": {
			"Type": "String",
			"Default": "WARNING",
			"Description": "Log level for Lambda functions (DEBUG, INFO, WARN, ERROR, CRITICAL are valid values)."
		},
		"MaxWait": {
			"Type": "Number",
			"Default": 300,
			"Description": "Max wait/run time for lambda and restore to become available"
		},
		"LambdaCWLogRetention": {
			"Type": "Number",
			"Default": "7",
			"Description": "Number of days to retain logs from the lambda functions in CloudWatch Logs"
		},
		"LogGroupName": {
			"Type": "String",
			"Default": "lambdaRestoreSnapshotsRDS-dest",
			"Description": "Name for RDS snapshot log group."
		}
	},
	"Conditions": {
		"DefaultBucket": {
			"Fn::Equals": [{
				"Ref": "CodeBucket"
			}, "DEFAULT_BUCKET"]
		}
	},
	"Mappings": {
		"Buckets": {
			"us-east-1": {
				"Bucket": "roadsync-rds-snapshot-tool-us-east-1"
			},
			"us-west-2": {
				"Bucket": "roadsync-rds-snapshot-tool-us-west-2"
			},
			"us-east-2": {
				"Bucket": "roadsync-rds-snapshot-tool-us-east-2"
			},
			"ap-southeast-2": {
				"Bucket": "roadsync-rds-snapshot-tool-ap-southeast-2"
			},
			"ap-northeast-1": {
				"Bucket": "roadsync-rds-snapshot-tool-ap-northeast-1"
			},
			"eu-west-1": {
				"Bucket": "roadsync-rds-snapshot-tool-eu-west-1"
			},
			"eu-central-1": {
				"Bucket": "roadsync-rds-snapshot-tool-eu-central-1"
			},
			"ca-central-1": {
				"Bucket": "roadsync-rds-snapshot-tool-ca-central-1"
			},
			"eu-west-2": {
				"Bucket": "roadsync-rds-snapshot-tool-eu-west-2"
			},
			"us-west-1": {
				"Bucket": "roadsync-rds-snapshot-tool-us-west-1"
			},
			"ap-northeast-2": {
				"Bucket": "roadsync-rds-snapshot-tool-ap-northeast-2"
			},
			"ap-southeast-1": {
				"Bucket": "roadsync-rds-snapshot-tool-ap-southeast-1-real"
			}
		}
	},
	"Resources": {
		"topicRestoreFailed": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "copies_failed_dest_rds"
			}
		},
		"snspolicyRestoreFailed": {
			"Type": "AWS::SNS::TopicPolicy",
			"Properties": {
				"Topics": [{
					"Ref": "topicRestoreFailed"
				}],
				"PolicyDocument": {
					"Version": "2008-10-17",
					"Id": "__default_policy_ID",
					"Statement": [{
						"Sid": "__default_statement_ID",
						"Effect": "Allow",
						"Principal": {
							"AWS": "*"
						},
						"Action": [
							"SNS:GetTopicAttributes",
							"SNS:SetTopicAttributes",
							"SNS:AddPermission",
							"SNS:RemovePermission",
							"SNS:DeleteTopic",
							"SNS:Subscribe",
							"SNS:ListSubscriptionsByTopic",
							"SNS:Publish",
							"SNS:Receive"
						],
						"Resource": "*",
						"Condition": {
							"StringEquals": {
								"AWS:SourceOwner": {
									"Ref": "AWS::AccountId"
								}
							}
						}
					}]
				}
			}
		},
		"alarmcwRestoreFailed": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"ActionsEnabled": "true",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"MetricName": "ExecutionsFailed",
				"Namespace": "AWS/States",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1.0",
				"AlarmActions": [{
					"Ref": "topicRestoreFailed"
				}],
				"Dimensions": [{
					"Name": "StateMachineArn",
					"Value": {
						"Ref": "statemachineRestoreSnapshotsDestRDS"
					}
				}]
			}
		},
		"iamroleRestoreSnapshotsRDS": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": "lambda.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"Policies": [{
						"PolicyName": "inline_policy_snapshots_rds_cw_logs",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:PutLogEvents"
								],
								"Resource": "arn:aws:logs:*:*:*"
							}]
						}
					},
					{
						"PolicyName": "inline_policy_snapshots_rds",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"rds:AddTagsToResource",
									"rds:DescribeDBSnapshots",
									"rds:RestoreDBInstanceFromS3",
									"rds:StopDBInstance",
									"rds:DescribeDBSnapshotAttributes",
									"rds:StartDBInstance",
									"rds:ListTagsForResource",
									"rds:CreateDBSnapshot",
									"rds:RestoreDBInstanceFromDBSnapshot",
									"rds:CreateDBInstance",
									"rds:DescribeDBInstances",
									"rds:ModifyDBInstance",
									"rds:RestoreDBInstanceToPointInTime",
									"rds:DeleteDBInstance"
								],
								"Resource": "*"
							}]
						}

					},
					{
						"PolicyName": "inline_policy_snapshot_rds_kms_access",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
									"Sid": "AllowUseOfTheKey",
									"Effect": "Allow",
									"Action": [
										"kms:Encrypt",
										"kms:Decrypt",
										"kms:ReEncrypt*",
										"kms:GenerateDataKey*",
										"kms:DescribeKey"
									],
									"Resource": [
										"*"
									]
								},
								{
									"Sid": "AllowAttachmentOfPersistentResources",
									"Effect": "Allow",
									"Action": [
										"kms:CreateGrant",
										"kms:ListGrants",
										"kms:RevokeGrant"
									],
									"Resource": [
										"*"
									],
									"Condition": {
										"Bool": {
											"kms:GrantIsForAWSResource": true
										}
									}
								}
							]
						}
					}
				]
			}
		},
		"lambdaRestoreSnapshotsRDS": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Fn::If": ["DefaultBucket", {
							"Fn::FindInMap": ["Buckets", {
								"Ref": "AWS::Region"
							}, "Bucket"]
						}, {
							"Ref": "CodeBucket"
						}]
					},
					"S3Key": "restore_snapshots_rds.zip"
				},
				"MemorySize" : 512,
				"Description": "This functions copies snapshots for RDS Instances shared with this account. It checks for existing snapshots following the pattern specified in the environment variables with the following format: <dbInstanceIdentifier-identifier>-YYYY-MM-DD-HH-MM",
				"Environment": {
					"Variables": {
						"SNAPSHOT_PATTERN": {
							"Ref": "SnapshotPattern"
						},
						"SNAPSHOT_TYPE": {
							"Ref": "SnapshotType"
						},
						"REGION_OVERRIDE": {
							"Ref": "SourceRegionOverride"
						},
						"DB_PATTERN": {
							"Ref": "DatabasePattern"
						},
						"SNAPSHOT_DB_MAP": {
							"Ref": "SnapshotDbMap"
						},
						"RESTORE_ARGS": {
							"Ref": "RestoreArgs"
						},
						"RESTORE_INTERVAL": {
							"Ref": "RestoreInterval"
						},
						"LOAD_BALANCER": {
							"Ref": "LoadBalancer"
						},
						"LOG_LEVEL": {
							"Ref": "LogLevel"
						},
						"MAX_WAIT": {
							"Ref": "MaxWait"
						}
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"iamroleRestoreSnapshotsRDS", "Arn"]
				},
				"Runtime": "python3.7",
				"Handler": "lambda_function.lambda_handler",
				"Timeout": {
					"Ref": "MaxWait"
				}
			}
		},
		"iamroleStateExecution": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": {
								"Fn::Join": ["", ["states.", {
									"Ref": "AWS::Region"
								}, ".amazonaws.com"]]
							}
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"Policies": [{
					"PolicyName": "inline_policy_rds_snapshot",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"lambda:InvokeFunction"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"statemachineRestoreSnapshotsDestRDS": {
			"Type": "AWS::StepFunctions::StateMachine",
			"Properties": {
				"DefinitionString": {
					"Fn::Join": ["", [{
							"Fn::Join": ["\n", [
								" {\"Comment\":\"Copies snapshots locally and then to DEST_REGION\",",
								" \"StartAt\":\"RestoreSnapshots\",",
								" \"States\":{",
								"   \"RestoreSnapshots\":{",
								"     \"Type\":\"Task\",",
								"     \"Resource\": "
							]]
						},
						"\"",
						{
							"Fn::GetAtt": [
								"lambdaRestoreSnapshotsRDS", "Arn"]
						}, "\"\n,",
						{
							"Fn::Join": ["\n", [
								"     \"Retry\":[",
								"       {",
								"       \"ErrorEquals\":[ ",
								"         \"SnapshotToolException\"",
								"       ],",
								"       \"IntervalSeconds\":300,",
								"       \"MaxAttempts\":5,",
								"       \"BackoffRate\":1",
								"     },",
								"     {",
								"      \"ErrorEquals\":[ ",
								"         \"States.ALL\"], ",
								"         \"IntervalSeconds\": 30,",
								"         \"MaxAttempts\": 20,",
								"         \"BackoffRate\": 1",
								"     }",
								"    ],",
								"    \"End\": true ",
								"   }",
								" }}"
							]]
						}
					]]
				},
				"RoleArn": {
					"Fn::GetAtt": ["iamroleStateExecution", "Arn"]
				}
			}
		},
		"iamroleStepInvocation": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": "events.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"Policies": [{
					"PolicyName": "inline_policy_state_invocation",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"states:StartExecution"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"cwEventRestoreSnapshotsRDS": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "Triggers the RDS Copy state machine in the destination account",
				"ScheduleExpression": {
					"Fn::Join": ["", ["cron(", {
						"Ref": "RunSchedule"
					}, ")"]]
				},
				"State": "ENABLED",
				"Targets": [{
					"Arn": {
						"Ref": "statemachineRestoreSnapshotsDestRDS"
					},
					"Id": "Target1",
					"RoleArn": {
						"Fn::GetAtt": ["iamroleStepInvocation", "Arn"]
					}
				}]
			}
		},
		"cwloggrouplambdaRestoreSnapshotsRDS":{
			"Type": "AWS::Logs::LogGroup",
			"Description": "Log group for the lambdaRestoreSnapshotsRDS function's logs",
			"DependsOn": "lambdaRestoreSnapshotsRDS",
			"Properties": {
				"RetentionInDays": { "Ref": "LambdaCWLogRetention" }, 
				"LogGroupName": { 
					"Fn::Sub": [ "/aws/lambda/${func}", { "func": {	"Ref" : "lambdaRestoreSnapshotsRDS"} } ]
				}
			}
		}
	},
	"Outputs": {
		"CopyFailedTopic": {
			"Description": "Subscribe to this topic to receive alerts of failed copies",
			"Value": {
				"Ref": "topicRestoreFailed"
			}
		}
	},
	"Description": "Snapshots Tool for RDS cross-region and cross-account (destination account stack)"
}
